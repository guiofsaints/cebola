From e3643675ef77a6fad3a2f400ffe82102fca196fa Mon Sep 17 00:00:00 2001
From: Goh Wei Wen <goweiwen@gmail.com>
Date: Sat, 8 Jul 2023 23:20:34 +0800
Subject: [PATCH] feat: add state/disk slot commands

---
 command.c | 105 ++++++++++++++++++++++++++++++++++++++++++++++++++++++
 command.h |  17 +++++++--
 runloop.c |  12 +++++++
 runloop.h |   4 +++
 4 files changed, 136 insertions(+), 2 deletions(-)

diff --git a/command.c b/command.c
index 1f07bdd4eeb..b64f63f08d9 100644
--- a/command.c
+++ b/command.c
@@ -681,6 +681,114 @@ bool command_show_osd_msg(command_t *cmd, const char* arg)
     return true;
 }
 
+bool command_get_disk_count(command_t *cmd, const char *arg)
+{
+   char reply[128]              = "";
+
+   runloop_state_t *runloop_st = runloop_state_get_ptr();
+   rarch_system_info_t *sys_info = runloop_st ? (rarch_system_info_t*)&runloop_st->system : NULL;
+   if (!sys_info) return false;
+
+   unsigned int disk = disk_control_get_num_images(&sys_info->disk_control);
+
+   snprintf(reply, sizeof(reply) - 1, "GET_DISK_COUNT %d", disk);
+   cmd->replier(cmd, reply, strlen(reply));
+   return true;
+}
+
+bool command_get_disk_slot(command_t *cmd, const char *arg)
+{
+   char reply[128]              = "";
+
+   runloop_state_t *runloop_st = runloop_state_get_ptr();
+   rarch_system_info_t *sys_info = runloop_st ? (rarch_system_info_t*)&runloop_st->system : NULL;
+   if (!sys_info) return false;
+
+   unsigned int disk = disk_control_get_image_index(&sys_info->disk_control);
+
+   snprintf(reply, sizeof(reply) - 1, "GET_DISK_SLOT %d", disk);
+   cmd->replier(cmd, reply, strlen(reply));
+   return true;
+}
+
+bool command_set_disk_slot(command_t *cmd, const char *arg)
+{
+   char reply[128]              = "";
+
+   runloop_state_t *runloop_st = runloop_state_get_ptr();
+   rarch_system_info_t *sys_info = runloop_st ? (rarch_system_info_t*)&runloop_st->system : NULL;
+   if (!sys_info) return false;
+
+   unsigned int disk = (unsigned int)strtoul(arg, NULL, 10);
+
+   disk_control_set_eject_state(&sys_info->disk_control, true, false);
+   disk_control_set_index(&sys_info->disk_control, disk, true);
+   disk_control_set_eject_state(&sys_info->disk_control, false, false);
+
+   snprintf(reply, sizeof(reply) - 1, "SET_DISK_SLOT %d", disk);
+   cmd->replier(cmd, reply, strlen(reply));
+   return true;
+}
+
+bool command_get_state_slot(command_t *cmd, const char *arg)
+{
+   char reply[128] = "";
+
+   bool savestates_enabled      = core_info_current_supports_savestate();
+   if (!savestates_enabled) return false;
+
+   unsigned int slot = runloop_get_current_savestate();
+
+   snprintf(reply, sizeof(reply) - 1, "GET_STATE_SLOT %d", slot);
+   cmd->replier(cmd, reply, strlen(reply));
+   return true;
+}
+
+bool command_set_state_slot(command_t *cmd, const char *arg)
+{
+   char reply[128] = "";
+   unsigned int slot = (unsigned int)strtoul(arg, NULL, 10);
+
+   bool savestates_enabled      = core_info_current_supports_savestate();
+   if (!savestates_enabled) return false;
+
+   runloop_set_current_savestate(slot);
+
+   snprintf(reply, sizeof(reply) - 1, "SET_STATE_SLOT %d", slot);
+   cmd->replier(cmd, reply, strlen(reply));
+   return true;
+}
+
+bool command_save_state_slot(command_t *cmd, const char *arg)
+{
+   char state_path[16384];
+   size_t size;
+   char reply[128]              = "";
+   unsigned int slot            = (unsigned int)strtoul(arg, NULL, 10);
+   bool savestates_enabled      = core_info_current_supports_savestate();
+   bool ret                     = false;
+   state_path[0]                = '\0';
+   snprintf(reply, sizeof(reply) - 1, "SAVE_STATE_SLOT %d", slot);
+   if (savestates_enabled)
+   {
+      runloop_get_savestate_path(state_path, sizeof(state_path), slot);
+
+      size = core_serialize_size();
+      savestates_enabled = (size > 0);
+   }
+   if (savestates_enabled)
+   {
+      if (slot == -1)
+         ret = content_auto_save_state(state_path);
+      else
+         ret = content_save_state(state_path, true);
+   }
+   else
+      ret = false;
+
+   cmd->replier(cmd, reply, strlen(reply));
+   return ret;
+}
 
 bool command_load_state_slot(command_t *cmd, const char *arg)
 {
diff --git a/command.h b/command.h
index ad3ac3e12eb..416f98062f6 100644
--- a/command.h
+++ b/command.h
@@ -408,6 +408,12 @@ bool command_version(command_t *cmd, const char* arg);
 bool command_get_status(command_t *cmd, const char* arg);
 bool command_get_config_param(command_t *cmd, const char* arg);
 bool command_show_osd_msg(command_t *cmd, const char* arg);
+bool command_get_disk_count(command_t *cmd, const char *arg);
+bool command_get_disk_slot(command_t *cmd, const char *arg);
+bool command_set_disk_slot(command_t *cmd, const char *arg);
+bool command_get_state_slot(command_t *cmd, const char *arg);
+bool command_set_state_slot(command_t *cmd, const char *arg);
+bool command_save_state_slot(command_t *cmd, const char *arg);
 bool command_load_state_slot(command_t *cmd, const char* arg);
 bool command_play_replay_slot(command_t *cmd, const char* arg);
 #ifdef HAVE_CHEEVOS
@@ -441,8 +447,15 @@ static const struct cmd_action_map action_map[] = {
    { "READ_CORE_MEMORY", command_read_memory,      "<address> <number of bytes>" },
    { "WRITE_CORE_MEMORY",command_write_memory,     "<address> <byte1> <byte2> ..." },
 
-   { "LOAD_STATE_SLOT",command_load_state_slot, "<slot number>"},
-   { "PLAY_REPLAY_SLOT",command_play_replay_slot, "<slot number>"},
+   { "GET_DISK_COUNT",   command_get_disk_count,   "No argument" },
+   { "GET_DISK_SLOT",    command_get_disk_slot,    "No argument" },
+   { "SET_DISK_SLOT",    command_set_disk_slot,    "<disc number>" },
+
+   { "GET_STATE_SLOT",   command_get_state_slot,   "No argument" },
+   { "SET_STATE_SLOT",   command_set_state_slot,   "<slot number>" },
+   { "SAVE_STATE_SLOT",  command_save_state_slot,  "<slot number>" },
+   { "LOAD_STATE_SLOT",  command_load_state_slot,  "<slot number>" },
+   { "PLAY_REPLAY_SLOT", command_play_replay_slot, "<slot number>" },
 };
 
 static const struct cmd_map map[] = {
diff --git a/runloop.c b/runloop.c
index 846fbabcd3a..bd8bc2adecf 100644
--- a/runloop.c
+++ b/runloop.c
@@ -7195,6 +7195,18 @@ void runloop_task_msg_queue_push(
 }
 
 
+uint32_t runloop_get_current_savestate()
+{
+   settings_t *settings        = config_get_ptr();
+   return settings ? settings->ints.state_slot : 0;
+}
+
+void runloop_set_current_savestate(int state_slot)
+{
+   settings_t *settings        = config_get_ptr();
+   settings->ints.state_slot = state_slot;
+}
+
 bool runloop_get_current_savestate_path(char *path, size_t len)
 {
    settings_t *settings        = config_get_ptr();
diff --git a/runloop.h b/runloop.h
index 3ba255f7ba9..b0f2d5f567b 100644
--- a/runloop.h
+++ b/runloop.h
@@ -424,6 +424,10 @@ uint32_t runloop_get_flags(void);
 
 bool runloop_get_entry_state_path(char *path, size_t len, unsigned slot);
 
+uint32_t runloop_get_current_savestate();
+
+void runloop_set_current_savestate(int state_slot);
+
 bool runloop_get_current_savestate_path(char *path, size_t len);
 
 bool runloop_get_savestate_path(char *path, size_t len, int slot);
